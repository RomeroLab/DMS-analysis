#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Nov 29 15:02:05 2018

@author: hridindu
"""

import numpy as np
import pandas as pd
#%%
def filter_MSA(filename, cov_cut): #Load .aln infile generated by JackHMMER following Jerry's workflow and filter by covereage. 0.9 cov_cut
    with open(filename) as infile:
        for line in infile:
            if line[0]!='#' and len(line)>10:
                name,queryseq = line.split()
                break

    querypos = [i for i in range(len(queryseq)) if queryseq[i]!='-']
    seqs = []
    with open(filename) as infile:
        for line in infile:
            if len(line)>10 and line[0]!='#':
                name,seq = line.split()
                seq = ''.join([seq[i] for i in querypos])
                coverage = 1 - seq.count('-')/len(seq)
                if coverage>cov_cut:
                    if seq not in seqs: # new, unique sequence
                        seqs.append(seq)
    open(filename.split('/')[-1][:-4] + '_filtered.aln','w').write('\n'.join(seqs)+'\n')
    seqs = pd.DataFrame(seqs)
    return 



#%%
def count_MSA(filename, offset): #Load MSA in .aln format generated by JackHMMER and filtered by filter_MSA.py
                                         #Load reference AA sequence as fasta file
    with open(filename) as infile:
        
        seqs = infile.read().splitlines() #Load each sequence in MSA
        seq_len = len(seqs[0]) 
        aa_list = list('ACEDGFIHKMLNQPSRTWVY-')
        
        aa_freq = pd.DataFrame(index = list(range(seq_len)), columns = aa_list).fillna(0).astype('float64')
        #AA frequency at each position for all sequences in the MSA
        bg_freq = pd.DataFrame(index = list(range(seq_len)), columns = aa_list).fillna(0).astype('float64')
        #Background frequency of each amino acid in the MSA
        
        msa = [list(aa) for aa in seqs] 
        t_msa = list(zip(*msa)) 
        
        for i, pos in enumerate(t_msa):
            for aa in aa_freq:
                aa_freq.at[i,aa] = pos.count(aa)/float(len(pos))
                
        for i, pos in enumerate(t_msa):
            for aa in bg_freq:        
                bg_freq.at[i,aa] = aa_freq[aa].sum()/aa_freq.values.sum()

        aa_freq['Position'] = list(range(offset, seq_len + offset))
                
#    aa_freq.to_csv(filename.split('/')[-1][:-4] + '_freq.csv')
    return aa_freq, bg_freq
#%%
def calc_MSA_RE(filename, offset):
    aa_freq, bg_freq = count_MSA(filename, offset)
    
    re = aa_freq * np.log2(aa_freq/bg_freq)
    nans = np.isnan(re)
    infs = np.isinf(re)
    re[infs] = 0
    re[nans] = 0
    
    flat_re = re.sum(axis=1)
    #normalize: 
    flat_re = pd.DataFrame({'re_flat': (flat_re - flat_re.min()) / (flat_re.max() - flat_re.min()),
                            'pct_re' : flat_re.rank(pct = True)}, 
                            index = aa_freq.index)
    re['re_flat'] = flat_re['re_flat']
    re['pct_re'] = flat_re['pct_re']
    re['Position'] = aa_freq['Position']
    return re
#%%
